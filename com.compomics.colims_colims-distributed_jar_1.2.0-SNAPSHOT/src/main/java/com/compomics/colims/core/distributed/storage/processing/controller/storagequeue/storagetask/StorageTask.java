/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.compomics.colims.core.distributed.storage.processing.controller.storagequeue.storagetask;

import com.compomics.colims.core.distributed.storage.enums.StorageState;
import com.compomics.colims.core.distributed.storage.enums.StorageType;

/**
 *
 * @author Kenneth
 */
public class StorageTask implements Comparable {

    private final long taskID;
    private final String fileLocation;
    private final String userName;
    private StorageState state = StorageState.WAITING;
    private long sampleID;
    private String instrumentId;
    private StorageType type;

    /**
     *
     * @param taskID the taskID of this storageTask. If this is not yet known,
     * it has to be generated by the StorageQueue
     * @param fileLocation the path to the file that needs to be stored
     * @param userName the owner of the experiment that will be stored
     * @param sampleID
     * @param instrumentId
     */
    public StorageTask(long taskID, String fileLocation, String userName, long sampleID, String instrumentId, StorageType type) {
        this.taskID = taskID;
        this.fileLocation = fileLocation;
        this.userName = userName;
        this.sampleID = sampleID;
        this.instrumentId = instrumentId;
        this.type = type;
    }

    public StorageType getType() {
        return type;
    }

    public void setType(StorageType type) {
        this.type = type;
    }

    public String getInstrumentId() {
        return instrumentId;
    }

    public void setInstrumentId(String instrumentId) {
        this.instrumentId = instrumentId;
    }

    public long getSampleID() {
        return sampleID;
    }

    public void setSampleID(long sampleID) {
        this.sampleID = sampleID;
    }

    public long getTaskID() {
        return taskID;
    }

    public String getFileLocation() {
        return fileLocation;
    }

    public String getUserName() {
        return userName;
    }

    public StorageState getState() {
        return state;
    }

    public void setState(StorageState state) {
        this.state = state;
    }

    @Override
    public int compareTo(Object o) {
        if (o instanceof StorageTask) {
            StorageTask otherTask = (StorageTask) o;
            if (getTaskID() > otherTask.getTaskID()) {
                return 1;
            } else if (getTaskID() == otherTask.getTaskID()) {
                return 0;
            } else {
                return -1;
            }
        } else {
            return -1;
        }
    }

}
