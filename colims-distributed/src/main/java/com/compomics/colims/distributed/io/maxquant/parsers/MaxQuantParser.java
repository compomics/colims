package com.compomics.colims.distributed.io.maxquant.parsers;

import com.compomics.colims.core.io.MaxQuantImport;
import com.compomics.colims.core.service.FastaDbService;
import com.compomics.colims.distributed.io.maxquant.MaxQuantConstants;
import com.compomics.colims.distributed.io.maxquant.UnparseableException;
import com.compomics.colims.model.*;
import com.compomics.colims.model.enums.FastaDbType;
import org.apache.commons.io.FilenameUtils;
import org.slf4j.Logger;
import org.jdom2.JDOMException;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Parser for the text files generated by a
 * <a href="http://maxquant.org/">MaxQuant</a>run. Invokes sub-parsers such as
 * {@link MaxQuantEvidenceParser} and {@link MaxQuantSpectraParser} to handle
 * specific files contained in the text folder.
 */
@Component("maxQuantParser")
public class MaxQuantParser {

    /**
     * Logger instance.
     */
    private static final Logger LOGGER = LoggerFactory.getLogger(MaxQuantParser.class);

    private static final String SILAC_LIGHT = "SILAC light";
    private static final String SILAC_MEDIUM = "SILAC medium";
    private static final String SILAC_HEAVY = "SILAC heavy";
    private static final String ICAT_LIGHT = "ICAT light reagent";
    private static final String ICAT_HEAVY = "ICAT heavy reagent";

    /**
     * The map of analytical runs (key: run name; value: the
     * {@link AnalyticalRun} instance);
     */
    private final Map<String, AnalyticalRun> analyticalRuns = new HashMap<>();
    /**
     * We want the FASTA DB files to be parsed in the order the FastaDbType enum values are declared
     * so use a LinkedHashMap to preserve the natural FastaDbType enum order.
     * (iterating over an EnumMap maintains that order as well)
     */
    LinkedHashMap<FastaDb, Path> fastaDbMap = new LinkedHashMap<>();
    /**
     * The path of the MaxQuant txt directory.
     */
    Path txtDirectory;
    /**
     * The child parsers.
     */
    private final MaxQuantSpectraParser maxQuantSpectraParser;
    private final MaxQuantProteinGroupsParser maxQuantProteinGroupsParser;
    private final MaxQuantEvidenceParser maxQuantEvidenceParser;
    private final MaxQuantSearchSettingsParser maxQuantSearchSettingsParser;
    private final MaxQuantQuantificationSettingsParser maxQuantQuantificationSettingsParser;
    private final FastaDbService fastaDbService;

    @Autowired
    public MaxQuantParser(MaxQuantSpectraParser maxQuantSpectraParser,
                          MaxQuantProteinGroupsParser maxQuantProteinGroupsParser,
                          MaxQuantEvidenceParser maxQuantEvidenceParser,
                          MaxQuantSearchSettingsParser maxQuantSearchSettingsParser,
                          MaxQuantQuantificationSettingsParser maxQuantQuantificationSettingsParser,
                          FastaDbService fastaDbService) {
        this.maxQuantSpectraParser = maxQuantSpectraParser;
        this.maxQuantProteinGroupsParser = maxQuantProteinGroupsParser;
        this.maxQuantEvidenceParser = maxQuantEvidenceParser;
        this.maxQuantSearchSettingsParser = maxQuantSearchSettingsParser;
        this.maxQuantQuantificationSettingsParser = maxQuantQuantificationSettingsParser;
        this.fastaDbService = fastaDbService;
    }

    /**
     * Clear the parser's resources.
     */
    public void clear() {
        //clearAfterSingleRun();
        maxQuantEvidenceParser.clear();
        maxQuantSpectraParser.clear();
        maxQuantSearchSettingsParser.clear();
        maxQuantQuantificationSettingsParser.clear();
        maxQuantProteinGroupsParser.clear();
        analyticalRuns.clear();
        fastaDbMap.clear();
    }

    /**
     * Clear the parser's resources for a single run.
     */
    public void clearAfterSingleRun(String runName) {
        AnalyticalRun analyticalRun = analyticalRuns.get(runName);
        analyticalRun.getSpectrums().clear();
        analyticalRun.getProteinGroupQuants().clear();
        maxQuantEvidenceParser.clear();
        maxQuantSpectraParser.clear();
        maxQuantProteinGroupsParser.clearAfterSingleRun();
    }

    /**
     * Parse search and quantification settings and the protein groups.
     *
     * @param maxQuantImport  the {@link MaxQuantImport} instance
     * @param fastasDirectory the fasta directory path
     * @return the set of MaxQuant run names
     * @throws IOException   in case of an input/output related problem
     * @throws JDOMException in case of an XML parsing related problem
     */
    public Set<String> parseSettingsAndProteins(MaxQuantImport maxQuantImport, Path fastasDirectory) throws IOException, JDOMException {
        EnumMap<FastaDbType, List<FastaDb>> fastaDbs = new EnumMap<>(FastaDbType.class);
        //get the FASTA db entities from the database
        maxQuantImport.getFastaDbIds().forEach((FastaDbType fastaDbType, List<Long> fastaDbIds) -> {
            List<FastaDb> fastaDbList = new ArrayList<>();
            fastaDbIds.forEach(fastaDbId -> fastaDbList.add(fastaDbService.findById(fastaDbId)));
            fastaDbs.put(fastaDbType, fastaDbList);
        });

        fastaDbs.entrySet().forEach((entry) -> {
            entry.getValue().forEach(fastaDb -> {
                //make the path absolute and check if it exists
                String fastaDbFilePath = FilenameUtils.separatorsToSystem(fastaDb.getFilePath());
                Path absoluteFastaDbPath = fastasDirectory.resolve(fastaDbFilePath);
                if (!Files.exists(absoluteFastaDbPath)) {
                    throw new IllegalArgumentException("The FASTA DB file " + absoluteFastaDbPath + " doesn't exist.");
                }
                fastaDbMap.put(fastaDb, absoluteFastaDbPath);
            });
        });

        //parse the search settings
        LOGGER.info("parsing search settings");
        maxQuantSearchSettingsParser.parse(Paths.get(maxQuantImport.getCombinedDirectory()), Paths.get(maxQuantImport.getMqParFile()), fastaDbs);

        //populate the analytical runs map
        maxQuantSearchSettingsParser.getAnalyticalRuns().keySet().forEach((run -> analyticalRuns.put(run.getName(), run)));

        //parse the quantification settings
        //for SILAC or ICAT experiments, we don't have any reagent name from MaxQuant.
        //Colims gives reagent names according to the number of samples.
        switch (maxQuantImport.getQuantificationMethod()) {
            case SILAC:
                List<String> silacReagents = new ArrayList<>();
                if (maxQuantSearchSettingsParser.getLabelMods().size() == 3) {
                    silacReagents.addAll(Arrays.asList(SILAC_LIGHT, SILAC_MEDIUM, SILAC_HEAVY));
                    maxQuantQuantificationSettingsParser.parse(new ArrayList<>(analyticalRuns.values()), maxQuantImport.getQuantificationMethod(), silacReagents);
                } else if (maxQuantSearchSettingsParser.getLabelMods().size() == 2) {
                    silacReagents.addAll(Arrays.asList(SILAC_LIGHT, SILAC_HEAVY));
                    maxQuantQuantificationSettingsParser.parse(new ArrayList<>(analyticalRuns.values()), maxQuantImport.getQuantificationMethod(), silacReagents);
                }
                break;
            case ICAT:
                List<String> icatReagents = new ArrayList<>();
                icatReagents.addAll(Arrays.asList(ICAT_LIGHT, ICAT_HEAVY));
                maxQuantQuantificationSettingsParser.parse(new ArrayList<>(analyticalRuns.values()), maxQuantImport.getQuantificationMethod(), icatReagents);
                break;
            default:
                List<String> reagents = new ArrayList<>(maxQuantSearchSettingsParser.getIsobaricLabels().values());
                maxQuantQuantificationSettingsParser.parse(new ArrayList<>(analyticalRuns.values()), maxQuantImport.getQuantificationMethod(), reagents);
                break;
        }

        //set entity relations
        analyticalRuns.values().forEach(analyticalRun -> {
            //link the quantification settings to each analytical run
            analyticalRun.setQuantificationSettings(maxQuantQuantificationSettingsParser.getRunsAndQuantificationSettings().get(analyticalRun));

            //set the entity relation between run and search settings
            analyticalRun.getSearchAndValidationSettings().setAnalyticalRun(analyticalRun);

            //set the entity relation between run and quantification settings
            analyticalRun.getQuantificationSettings().setAnalyticalRun(analyticalRun);
        });

        //look for the MaxQuant txt directory
        txtDirectory = Paths.get(maxQuantImport.getCombinedDirectory() + File.separator + MaxQuantConstants.TXT_DIRECTORY.value());
        if (!Files.exists(txtDirectory)) {
            throw new FileNotFoundException("The MaxQuant txt file " + txtDirectory.toString() + " was not found.");
        }

        //parse the protein groups file
        LOGGER.info("parsing proteinGroups.txt");
        Path proteinGroupsFile = Paths.get(txtDirectory.toString(), MaxQuantConstants.PROTEIN_GROUPS_FILE.value());
        if (!Files.exists(proteinGroupsFile)) {
            throw new FileNotFoundException("The proteinGroups.txt " + proteinGroupsFile.toString() + " was not found.");
        }
        maxQuantProteinGroupsParser.parse(proteinGroupsFile, fastaDbMap, maxQuantImport.getQuantificationMethod(), maxQuantImport.isIncludeContaminants(), maxQuantImport.getSelectedProteinGroupsHeaders());

        return maxQuantSearchSettingsParser.getRunSettings().keySet();
    }

    /**
     * Parse the evidence, msms and apl files files to Colims entities.
     * If the given raw file name is null, data from all runs is parsed.
     *
     * @param maxQuantImport the {@link MaxQuantImport} instance
     * @param rawFileName    the raw file name
     * @throws IOException          in case of an input/output related problem
     * @throws UnparseableException in case of a problem occurred while parsing
     */
    public void parseSpectraAndPSMs(MaxQuantImport maxQuantImport, String rawFileName) throws IOException, UnparseableException {
        if (rawFileName == null) {
            LOGGER.info("parsing msms.txt and spectra");
        } else {
            LOGGER.info("parsing msms.txt and spectra for run " + rawFileName);
        }
        maxQuantSpectraParser.parse(Paths.get(maxQuantImport.getCombinedDirectory()), rawFileName, maxQuantImport.isIncludeUnidentifiedSpectra(), maxQuantProteinGroupsParser.getOmittedProteinGroupIds());

        if (rawFileName == null) {
            LOGGER.info("parsing evidence.txt");
        } else {
            LOGGER.info("parsing evidence.txt for run " + rawFileName);
        }
        Path evidenceFile = Paths.get(txtDirectory.toString(), MaxQuantConstants.EVIDENCE_FILE.value());
        if (!Files.exists(evidenceFile)) {
            throw new FileNotFoundException("The evidence.txt " + evidenceFile.toString() + " was not found.");
        }
        maxQuantEvidenceParser.parse(evidenceFile, rawFileName, maxQuantProteinGroupsParser.getOmittedProteinGroupIds(), maxQuantImport.getQuantificationMethod(), maxQuantImport.getSelectedProteinGroupsHeaders());

        if (rawFileName == null) {
            //add the identified spectra for each run and set the entity relations
            analyticalRuns.forEach((runName, run) -> {
                setRunRelations(runName, run);
            });
        } else {
            AnalyticalRun run = analyticalRuns.get(rawFileName);

            setRunRelations(rawFileName, run);
        }

        //add the matching between runs peptides for each run
        Map<String, Set<Integer>> runToMbrPeptides = maxQuantEvidenceParser.getRunToMbrPeptides();
        runToMbrPeptides.forEach((runName, evidenceIds) -> {
            //get the run by name
            AnalyticalRun run = analyticalRuns.get(runName);

            evidenceIds.forEach(evidenceId -> {
                //create a dummy spectrum for each peptide
                Spectrum spectrum = createDummySpectrum();

                //set the entity relations between run and spectrum
                run.getSpectrums().add(spectrum);
                spectrum.setAnalyticalRun(run);

                //set the child relations for the spectrum
                setPeptideRelations(spectrum, null, null, evidenceId);
            });

        });

        //add the unidentified spectra for each run
        maxQuantSpectraParser.getMaxQuantSpectra().getUnidentifiedSpectra().forEach((runName, spectra) -> {
            AnalyticalRun run = analyticalRuns.get(runName);

            //set the entity relations between run and spectrum
            run.getSpectrums().addAll(spectra);
            spectra.forEach(spectrum -> spectrum.setAnalyticalRun(run));
        });

        //if (getSpectrumToPsms().isEmpty() || maxQuantEvidenceParser.getSpectrumToPeptides().isEmpty() || maxQuantProteinGroupsParser.getProteinGroups().isEmpty()) {
        //    throw new UnparseableException("One of the parsed files could not be read properly.");
        //}
    }

    /**
     * Set the entity relations for the given run.
     *
     * @param runName       the MaxQuant run identifier
     * @param analyticalRun the {@link AnalyticalRun} instance
     */
    private void setRunRelations(String runName, AnalyticalRun analyticalRun) {
        //get the spectrum apl keys for each run
        Set<String> aplKeys = maxQuantSpectraParser.getMaxQuantSpectra().getRunToSpectrums().get(runName);
        if (aplKeys != null) {
            aplKeys.forEach(aplKey -> {
                //get the spectrum by it's key
                AnnotatedSpectrum annotatedSpectrum = maxQuantSpectraParser.getMaxQuantSpectra().getSpectra().get(aplKey);

                //set the entity relations between run and spectrum
                analyticalRun.getSpectrums().add(annotatedSpectrum.getSpectrum());
                annotatedSpectrum.getSpectrum().setAnalyticalRun(analyticalRun);

                //set the child entity relations for the spectrum
                setSpectrumRelations(aplKey, annotatedSpectrum);
            });
        } else {
            LOGGER.warn("No spectra found for run: " + runName);
        }
    }

    /**
     * Get the map that links the apl spectra with msms.txt entries (key: apl
     * key; value:).
     *
     * @return the link map
     */
    public Map<String, Set<Integer>> getSpectrumToPsms() {
        return maxQuantSpectraParser.getMaxQuantSpectra().getSpectrumToPsms();
    }

    /**
     * Return a list copy of the spectra per run map values.
     *
     * @return Collection of runs
     */
    public List<AnalyticalRun> getAnalyticalRuns() {
        return analyticalRuns.values().stream().collect(Collectors.toList());
    }

    /**
     * Get the protein groups as a set.
     *
     * @return the protein group set
     */
    public Set<ProteinGroup> getProteinGroupSet() {
        return maxQuantProteinGroupsParser.getProteinGroups().values().stream().collect(Collectors.toSet());
    }

    /**
     * Create the necessary relationships for the children of a spectrum.
     *
     * @param aplKey            the apl annotatedSpectrum key
     * @param annotatedSpectrum the {@link AnnotatedSpectrum} instance
     */
    private void setSpectrumRelations(String aplKey, AnnotatedSpectrum annotatedSpectrum) {
        //get the msms.txt IDs associated with the given annotatedSpectrum
        Set<Integer> msmsIds = maxQuantSpectraParser.getMaxQuantSpectra().getSpectrumToPsms().get(aplKey);
        for (Integer msmsId : msmsIds) {
            //get the evidence IDs associated with the msms ID
            for (Integer evidenceId : maxQuantEvidenceParser.getSpectrumToPeptides().get(msmsId)) {
                setPeptideRelations(annotatedSpectrum.getSpectrum(), annotatedSpectrum.getIonMatches(), annotatedSpectrum.getFragmentMasses(), evidenceId);
            }
        }
    }

    /**
     * Create the necessary relationships for the children of a peptide.
     *
     * @param spectrum       the associated {@link Spectrum} instance
     * @param matchedIons    the matched fragment ions
     * @param fragmentMasses the matched fragment masses
     * @param evidenceId     the peptide evidence ID
     */
    private void setPeptideRelations(Spectrum spectrum, String matchedIons, String fragmentMasses, Integer evidenceId) {
        //get the associated peptides by their evidence ID
        List<Peptide> peptides = maxQuantEvidenceParser.getPeptides().get(evidenceId);

        //look for a peptide that isn't already associated with a spectrum
        Optional<Peptide> foundPeptide = peptides.stream().filter(peptide -> peptide.getSpectrum() == null).findAny();
        if (foundPeptide.isPresent()) {
            Peptide peptide = foundPeptide.get();

            //get the protein groups IDs for each peptide
            Set<Integer> proteinGroupIds = maxQuantEvidenceParser.getPeptideToProteinGroups().get(evidenceId);

            proteinGroupIds.forEach(proteinGroupId -> {
                //get the protein group by it's ID
                ProteinGroup proteinGroup = maxQuantProteinGroupsParser.getProteinGroups().get(proteinGroupId);

                PeptideHasProteinGroup peptideHasProteinGroup = new PeptideHasProteinGroup();
                peptideHasProteinGroup.setPeptide(peptide);
                peptideHasProteinGroup.setProteinGroup(proteinGroup);

                proteinGroup.getPeptideHasProteinGroups().add(peptideHasProteinGroup);
                //set peptideHasProteinGroups in peptide
                peptide.getPeptideHasProteinGroups().add(peptideHasProteinGroup);
            });

            //set matched fragment ions and masses
            if (matchedIons != null && fragmentMasses != null) {
                peptide.setFragmentIons(matchedIons);
                peptide.setFragmentMasses(fragmentMasses);
            }

            //set entity relations between Spectrum and Peptide
            spectrum.getPeptides().add(peptide);
            peptide.setSpectrum(spectrum);
        } else {
            throw new IllegalStateException("No peptide without associated spectrum found for " + evidenceId);
        }
    }

    /**
     * Create a dummy spectrum for a matching between runs (MBR) identification.
     *
     * @return the dummy {@link Spectrum} instance
     */
    private Spectrum createDummySpectrum() {
        Spectrum spectrum = new Spectrum();

        spectrum.setAccession(Spectrum.MBR_SPECTRUM_ACCESSION);

        return spectrum;
    }
}
