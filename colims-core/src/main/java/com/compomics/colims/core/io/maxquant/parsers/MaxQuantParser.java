package com.compomics.colims.core.io.maxquant.parsers;

import com.compomics.colims.core.io.MappingException;
import com.compomics.colims.core.io.maxquant.MaxQuantAnalyticalRun;
import com.compomics.colims.core.io.maxquant.TabularFileLineValuesIterator;
import com.compomics.colims.core.io.maxquant.UnparseableException;
import com.compomics.colims.core.io.maxquant.headers.MaxQuantSummaryHeaders;
import com.compomics.colims.model.Peptide;
import com.compomics.colims.model.ProteinGroup;
import com.compomics.colims.model.Spectrum;
import com.compomics.colims.model.enums.FragmentationType;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.util.*;

/**
 * Parser for the text files generated by a <a href="http://maxquant.org/">MaxQuant</a>run. Invokes sub-parsers such as
 * {@link MaxQuantEvidenceParser} and {@link MaxQuantSpectrumParser} to handle specific files contained in the text
 * folder.
 */
@Service("maxQuantParser")
public class MaxQuantParser {

    private static final Logger LOGGER = Logger.getLogger(MaxQuantParser.class);
    private static final String MSMSTXT = "msms.txt";
    private static final String PROTEINGROUPSTXT = "proteinGroups.txt";

    @Autowired
    private MaxQuantSpectrumParser maxQuantSpectrumParser;
    @Autowired
    private MaxQuantProteinGroupParser maxQuantProteinGroupParser;
    @Autowired
    private MaxQuantEvidenceParser maxQuantEvidenceParser;

    private Map<Integer, Spectrum> spectra = new HashMap<>();
    private Map<Integer, ProteinGroup> proteinGroups = new HashMap<>();
    private Map<String, MaxQuantAnalyticalRun> analyticalRuns = new HashMap<>();
    private Map<Integer, FragmentationType> fragmentations = new HashMap<>();

    private boolean parsed = false;

    /**
     * An extra constructor for fun testing times.
     *
     * @param quantFolder File pointer to MaxQuant txt folder
     * @throws IOException thrown in case of a I/O related problem
     * @throws MappingException
     * @throws UnparseableException
     */
    public void parseFolder(final File quantFolder) throws IOException, MappingException, UnparseableException {
        TabularFileLineValuesIterator summaryIter = new TabularFileLineValuesIterator(new File(quantFolder, "summary.txt"));
        Map<String, String> row;
        String multiplicity = null;

        while (summaryIter.hasNext()) {
            row = summaryIter.next();

            if (row.containsKey(MaxQuantSummaryHeaders.MULTIPLICITY.getDefaultColumnName())) {
                multiplicity = row.get(MaxQuantSummaryHeaders.MULTIPLICITY.getDefaultColumnName());
                break;
            }
        }

        parseFolder(quantFolder, multiplicity);
    }

    /**
     * Parse the output folder and populate the parser with various datasets.
     *
     * @param quantFolder File pointer to MaxQuant txt folder
     * @throws IOException
     * @throws UnparseableException
     * @throws MappingException
     */
    public void parseFolder(final File quantFolder, String multiplicity) throws IOException, UnparseableException, MappingException {
        LOGGER.debug("parsing MSMS");
        spectra = maxQuantSpectrumParser.parse(new File(quantFolder, MSMSTXT));

        for (Map.Entry<Integer, Spectrum> spectrum : getSpectra().entrySet()) {
            if (analyticalRuns.containsKey(spectrum.getValue().getTitle())) {
                analyticalRuns.get(spectrum.getValue().getTitle()).addSpectrum(spectrum.getKey(), spectrum.getValue());
            } else {
                MaxQuantAnalyticalRun maxQuantRun = new MaxQuantAnalyticalRun(spectrum.getValue().getTitle(), quantFolder);
                maxQuantRun.addSpectrum(spectrum.getKey(), spectrum.getValue());
                analyticalRuns.put((spectrum.getValue().getTitle()), maxQuantRun);
            }
        }

        if (analyticalRuns.isEmpty()) {
            throw new UnparseableException("could not connect spectra to any run");
        }

        LOGGER.debug("parsing evidence");
        maxQuantEvidenceParser.parse(quantFolder, multiplicity);

        LOGGER.debug("parsing protein groups");
        proteinGroups = maxQuantProteinGroupParser.parse(new File(quantFolder, PROTEINGROUPSTXT));

        if (this.spectra.size() == 0 || maxQuantEvidenceParser.peptides.size() == 0 || proteinGroups.size() == 0) {
            throw new UnparseableException("one of the parsed files could not be read properly");
        } else {
            parsed = true;
        }
    }

    /**
     * If parser has parsed.
     *
     * @return Parsed
     */
    public boolean hasParsed() {
        return parsed;
    }

    /**
     * fetch the associated identification with a spectrum, null if not present
     *
     * @param spectrum the spectrum to fetch the identification for
     * @return the {@code PeptideAssumption} connected to the spectrum
     * @throws NumberFormatException if the spectrum is not present in the parsed file
     */
    public Peptide getIdentificationForSpectrum(Spectrum spectrum) throws NumberFormatException {
        return maxQuantEvidenceParser.peptides.get(spectrum.getId());
    }

    /**
     * Return a copy of the spectra map.
     *
     * @return Map of ids and spectra
     */
    public Map<Integer, Spectrum> getSpectra() {
        return Collections.unmodifiableMap(spectra);
    }

    /**
     * Return a list of protein group matches for a peptide
     *
     * @param peptide A peptide
     * @return Collection of protein groups
     * @throws NumberFormatException
     */
    public List<ProteinGroup> getProteinHitsForIdentification(Peptide peptide) throws NumberFormatException {
        List<ProteinGroup> proteinGroupSubset = new ArrayList<>();

        for (Integer index : maxQuantEvidenceParser.peptideProteins.get(peptide)) {
            proteinGroupSubset.add(proteinGroups.get(index));
        }

        return proteinGroupSubset;
    }

    /**
     * Return a list copy of the spectra per run map values.
     *
     * @return Collection of runs
     */
    public Collection<MaxQuantAnalyticalRun> getRuns() {
        return Collections.unmodifiableCollection(analyticalRuns.values());
    }

    /**
     * Get fragmentation type for the given ID.
     *
     * @param id The given ID
     * @return A FragmentationType
     */
    public FragmentationType getFragmentationType(Integer id) {
        return fragmentations.get(id);
    }

    /**
     * Clear the parser.
     */
    public void clear() {
        spectra.clear();
        maxQuantEvidenceParser.clear();
        proteinGroups.clear();
        analyticalRuns.clear();
        parsed = false;
    }
}
